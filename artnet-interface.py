#Packet sniffer in python
#For Linux

import socket
import sys
from struct import *

#create an INET, raw socket
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_UDP)

# receive a packet
packetCount=0
while True:
    data=s.recvfrom(65565)
    print('')
    print(repr(data[0]))
    print(data[1])

#    print(len(data[0]))
#    print(len(data[0][46:]))

#    print(repr(data[0][46:]))
    if(sys.getsizeof(data[0])>=512):
        list=[]
        for i in range(46,512+45):
            list.append(data[0][i]) #, len(data[0][46]), unpack('h', data[0][46]))
    #    print(repr(unpack('h', data[0][46])))
        print(list)
    if(packetCount>10): s.close()

'''
#this code runs on a raspberry pi and recreives artnet from another computer and forwards it onto the ethernet/dmx bridge device
#this is useful for viewing and emulating the artnet hex codes generated by the PC software

import socket
from binascii import hexlify

UDP_PORT = 6454						#common artnet/udp port
UDP_IP = "2.0.0.123"        # eigene ip
UDP_IP = "127.0.0.1"
UDP_IP_to = "2.25.116.211"  #mixer

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind(('', UDP_PORT))
sock.listen(1)
sock.settimeout(2)
con, addr = sock.accept()
print('Connected : '+addr)
while True:
    data = con.recv(1024).decode()
    print('\n'+data+'\n')
    if (not data): break




	data, addr = sock.recvfrom(1024)
	hex = hexlify(data)
	num = int(hex,16)
	print (hex)
	print (" ")
	#":".join("{:02x}".format(ord(c)) for c in data)
	#print (data)
    '''

# sock.sendto(data, (UDP_IP_to, UDP_PORT))
